'use strict';

var _typeof2 = require('/Users/leo/TIY/koans/node_modules/babel-runtime/helpers/typeof.js');

var _typeof3 = _interopRequireDefault(_typeof2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = undefined;

/**
 * Your overall goal for this assignment is to get all of the tests to pass.
 * This is an exercise both in testing as well as in the Javascript language
 * itself.
 * 
 * Replace all of the __ in the tests below with the appropriate value to 
 * make the test pass.
 */

/**
 * Assertions
 * 
 * There are different types of assertions built-in to Ava, which are meant
 * for setting up different kinds of tests.
 * 
 * You can read up on all of the assertion types here:
 * https://github.com/avajs/ava#assertions
 * 
 * We used the is() assertion in class today.
 */

(0, _ava2.default)('What will satisfy the truthy assertion?', function (trial) {
  trial.truthy(true);
});

(0, _ava2.default)('What is a falsey value?', function (trial) {
  trial.falsy(false);
});

(0, _ava2.default)('What is true?', function (trial) {
  trial.true(true);
});

(0, _ava2.default)('What is false?', function (trial) {
  trial.false(false);
});

(0, _ava2.default)('What will satisfy the equality assertion?', function (trial) {
  trial.is(2, 1 + 1);
});

(0, _ava2.default)('What will satisfy the inequality assertion?', function (trial) {
  trial.not(1, 1 + 1);
});

/**
 * Operators
 */

(0, _ava2.default)('What is addition?', function (trial) {
  trial.is(28 + 14, 42);
});

(0, _ava2.default)('What is assignment addition?', function (trial) {
  var result = 34;
  result += 23; // Equivalent to `result = result + n`; but more concise.

  trial.is(57, result);
});

(0, _ava2.default)('What is subtraction?', function (trial) {
  trial.is(30 - 9, 21);
});

(0, _ava2.default)('What is assignment subtraction?', function (trial) {
  var result = 5;
  result -= 2;

  trial.is(3, result);
});

// Assignment operators are available for multiplication and division as well.
// Let's do one more, the modulo (%) operator, used for showing division remainder.

(0, _ava2.default)('What is modulus?', function (trial) {
  var x = 5;
  var result = 10;
  result %= x; // Same as `result = result % x`.

  trial.is(0, result, 'What is the value of result?');
});

/**
 * Equality
 */

(0, _ava2.default)('What is ===?', function (trial) {
  var numberLiteral = 3;

  trial.true(3 === numberLiteral);
});

(0, _ava2.default)('What is ==?', function (trial) {
  var quotedNumber = '3';

  trial.true(quotedNumber == 3);
});

/**
 * Truthyness
 *   https://developer.mozilla.org/en-US/docs/Glossary/Truthy
 */

(0, _ava2.default)('What is the truthyness of positive numbers?', function (trial) {
  var oneIsTruthy = !!1;

  trial.is(true, oneIsTruthy);
});

(0, _ava2.default)('What is the truthyness of negative numbers?', function (trial) {
  var negativeOneIsTruthy = !!-1;

  trial.is(true, negativeOneIsTruthy);
});

/**
 * Assignment
 */

(0, _ava2.default)('Assigning a value to a local variable.', function (trial) {
  var one = void 0;
  one = 1;

  trial.is(1, one);
});

/**
 * Numbers
 */

// typeof() is a function that returns the type of its parameter as 
// a string.
(0, _ava2.default)('What is the javascript numeric type?', function (trial) {
  trial.is('number', (0, _typeof3.default)(42));
});

(0, _ava2.default)('Are integers and floats the same type?', function (trial) {
  trial.is(true, (0, _typeof3.default)(3.14159) === (0, _typeof3.default)(6));
});

/**
 * NaN
 * 
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN
 */
(0, _ava2.default)('What is NaN?', function (trial) {
  var resultOfFailedOperations = 42 / 'wat';

  trial.is(true, isNaN(resultOfFailedOperations));
});

/**
 * Strings
 */
(0, _ava2.default)('Are similar strings with different quote styles equal?', function (trial) {
  var doubleQuotedString = "apple";
  var singleQuotedString = 'apple';

  trial.is(true, doubleQuotedString === singleQuotedString);
});

(0, _ava2.default)('What is string concatenation?', function (trial) {
  var fruit = 'apple';
  var dish = 'pie';

  trial.is('apple pie', fruit + ' ' + dish);
});

(0, _ava2.default)('How do you find the length of a string?', function (trial) {
  var fruit = 'apple';

  trial.is(5, fruit.length);
});

(0, _ava2.default)('What is slicing a string?', function (trial) {
  var fruit = 'apple pie';

  trial.is('apple', fruit.slice(0, 5));
});

/**
 * Control Structures
 */

(0, _ava2.default)('What is an if statement?', function (trial) {
  var two = 2;
  var isPositive = false;
  if (two > 0) {
    isPositive = true;
  }

  trial.is(true, isPositive);
});

(0, _ava2.default)('What is a for loop?', function (trial) {
  var counter = 10;
  for (var i = 1; i <= 3; i++) {
    counter = counter + i;
  }

  trial.is(__, counter);
});

/**
 * Ternary operators (similar to 'if' statement)
 * 
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator
 */
(0, _ava2.default)('What is a ternary operator?', function (trial) {
  var two = 2;
  var fruit = two > 0 ? 'apple' : 'orange';
  trial.is(__, fruit);

  fruit = two < 0 ? 'apple' : 'orange';
  trial.is(__, fruit);
});

/**
 * Arrays
 */

(0, _ava2.default)('What is indexing an array literal', function (trial) {
  var things = ['cellar door', 42, true];

  trial.is(__, things[0]);
  trial.is(__, things[1]);
  trial.is(__, things[2]);
});

(0, _ava2.default)('What is the type of an array?', function (trial) {
  trial.is(__, (0, _typeof3.default)([]));
});

(0, _ava2.default)('What is the length of of an array?', function (trial) {
  trial.is(__, ['a', 'b', 'c'].length);
});

(0, _ava2.default)('What are stack methods on arrays?', function (trial) {
  var stack = [];
  stack.push('first');
  stack.push('second');

  trial.is(__, stack.pop());
  trial.is(__, stack.pop());
});

(0, _ava2.default)('What are queue methods on arrays?', function (trial) {
  var queue = [];
  queue.push('first');
  queue.push('second');
  queue.unshift('third');

  trial.is(__, queue.shift());
  trial.is(__, queue.shift());
});

/**
 * Objects
 */

(0, _ava2.default)('What is the type of an object?', function (trial) {
  trial.is(__, (0, _typeof3.default)({}));
});

(0, _ava2.default)('What is object literal notation?', function (trial) {
  var person = {
    name: 'Amory Blaine',
    age: 102
  };

  trial.is(__, person.name);
  trial.is(__, person.age);
});

(0, _ava2.default)('Dynamically adding properties to an object.', function (trial) {
  var person = {};
  person.__ = 'Amory Blaine';
  person.__ = 102;
  trial.is('Amory Blaine', person.name);
  trial.is(102, person.age);
});

/**
 * Array syntax for objects
 */
(0, _ava2.default)('Accessing object properties with strings.', function (trial) {
  var person = { name: 'Amory Blaine', age: 102 };

  trial.is(person['__'], 'Amory Blaine');
  trial.is(person['__'], 102);
});
//# sourceMappingURL=node_modules/.cache/ava/33752b60b9ce402f25b2a7005233cab9.js.map