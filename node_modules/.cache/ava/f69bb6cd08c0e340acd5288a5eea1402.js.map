{"version":3,"sources":["koans.js"],"names":["__","undefined","trial","truthy","falsy","true","false","is","not","result","x","numberLiteral","quotedNumber","oneIsTruthy","negativeOneIsTruthy","one","number","resultOfFailedOperations","isNaN","doubleQuotedString","singleQuotedString","fruit","dish","length","slice","two","isPositive","counter","i","things","stack","push","pop","queue","unshift","shift","person","name","age"],"mappings":"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","file":"koans.js","sourcesContent":["import test from 'ava'\nconst __ = undefined\n\n/**\n * Your overall goal for this assignment is to get all of the tests to pass.\n * This is an exercise both in testing as well as in the Javascript language\n * itself.\n * \n * Replace all of the __ in the tests below with the appropriate value to \n * make the test pass.\n */\n\n/**\n * Assertions\n * \n * There are different types of assertions built-in to Ava, which are meant\n * for setting up different kinds of tests.\n * \n * You can read up on all of the assertion types here:\n * https://github.com/avajs/ava#assertions\n * \n * We used the is() assertion in class today.\n */\n\ntest('What will satisfy the truthy assertion?', function (trial) {\n  trial.truthy(true);\n});\n\ntest('What is a falsey value?', function (trial) {\n  trial.falsy(false);\n});\n\ntest('What is true?', function (trial) {\n  trial.true(true);\n});\n\ntest('What is false?', function (trial) {\n  trial.false(false);\n});\n\ntest('What will satisfy the equality assertion?', function (trial) {\n  trial.is(2, 1 + 1);\n});\n\ntest('What will satisfy the inequality assertion?', function (trial) {\n  trial.not(1, 1 + 1)\n})\n\n/**\n * Operators\n */\n\ntest('What is addition?', function (trial) {\n  trial.is(28 + 14, 42)\n})\n\ntest('What is assignment addition?', function (trial) {\n  let result = 34\n  result += 23 // Equivalent to `result = result + n`; but more concise.\n\n  trial.is(57, result)\n})\n\ntest('What is subtraction?', function (trial) {\n  trial.is(30 - 9, 21)\n})\n\ntest('What is assignment subtraction?', function (trial) {\n  let result = 5\n  result -= 2\n\n  trial.is(3, result)\n})\n\n// Assignment operators are available for multiplication and division as well.\n// Let's do one more, the modulo (%) operator, used for showing division remainder.\n\ntest('What is modulus?', function (trial) {\n  const x = 5\n  let result = 10\n  result %= x // Same as `result = result % x`.\n\n  trial.is(0, result, 'What is the value of result?')\n})\n\n/**\n * Equality\n */\n\ntest('What is ===?', function (trial) {\n  const numberLiteral = 3\n\n  trial.true(3 === numberLiteral)\n})\n\ntest('What is ==?', function (trial) {\n  const quotedNumber = '3'\n\n  trial.true(quotedNumber == 3)\n})\n\n/**\n * Truthyness\n *   https://developer.mozilla.org/en-US/docs/Glossary/Truthy\n */\n\ntest('What is the truthyness of positive numbers?', function (trial) {\n  const oneIsTruthy = !!1\n\n  trial.is(true, oneIsTruthy)\n})\n\ntest('What is the truthyness of negative numbers?', function (trial) {\n  const negativeOneIsTruthy = !!-1\n\n  trial.is(true, negativeOneIsTruthy)\n})\n\n/**\n * Assignment\n */\n\ntest('Assigning a value to a local variable.', function (trial) {\n  let one\n  one = 1\n\n  trial.is(1, one)\n})\n\n/**\n * Numbers\n */\n\n// typeof() is a function that returns the type of its parameter as \n// a string.\ntest('What is the javascript numeric type?', function (trial) {\n  trial.is(number, typeof(42));\n})\n\n\ntest('Are integers and floats the same type?', function (trial) {\n  trial.is(__, typeof(3.14159) === typeof(6))\n})\n\n/**\n * NaN\n * \n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n */\ntest('What is NaN?', function (trial) {\n  const resultOfFailedOperations = 42 / 'wat'\n\n  trial.is(__, isNaN(resultOfFailedOperations))\n})\n\n/**\n * Strings\n */\ntest('Are similar strings with different quote styles equal?', function (trial) {\n  const doubleQuotedString = \"apple\"\n  const singleQuotedString = 'apple'\n\n  trial.is(__, doubleQuotedString === singleQuotedString)\n})\n\ntest('What is string concatenation?', function (trial) {\n  const fruit = 'apple'\n  const dish = 'pie'\n\n  trial.is(__, fruit + ' ' + dish)\n})\n\ntest('How do you find the length of a string?', function (trial) {\n  const fruit = 'apple'\n\n  trial.is(__, fruit.length)\n})\n\ntest('What is slicing a string?', function (trial) {\n  const fruit = 'apple pie'\n\n  trial.is(__, fruit.slice(0, 5))\n})\n\n/**\n * Control Structures\n */\n\ntest('What is an if statement?', function (trial) {\n  const two = 2\n  let isPositive = false\n  if (two > 0) {\n    isPositive = true\n  }\n\n  trial.is(__, isPositive)\n})\n\ntest('What is a for loop?', function (trial) {\n  let counter = 10\n  for (let i = 1; i <= 3; i++) {\n    counter = counter + i\n  }\n\n  trial.is(__, counter)\n})\n\n/**\n * Ternary operators (similar to 'if' statement)\n * \n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n */\ntest('What is a ternary operator?', function (trial) {\n  const two = 2\n  let fruit = two > 0 ? 'apple' : 'orange'\n  trial.is(__, fruit)\n\n  fruit = two < 0 ? 'apple' : 'orange'\n  trial.is(__, fruit)\n})\n\n/**\n * Arrays\n */\n\ntest('What is indexing an array literal', function (trial) {\n  const things = ['cellar door', 42, true]\n\n  trial.is(__, things[0])\n  trial.is(__, things[1])\n  trial.is(__, things[2])\n})\n\ntest('What is the type of an array?', function (trial) {\n  trial.is(__, typeof([]))\n})\n\ntest('What is the length of of an array?', function (trial) {\n  trial.is(__, ['a', 'b', 'c'].length)\n})\n\ntest('What are stack methods on arrays?', function (trial) {\n  let stack = []\n  stack.push('first')\n  stack.push('second')\n\n  trial.is(__, stack.pop())\n  trial.is(__, stack.pop())\n})\n\ntest('What are queue methods on arrays?', function (trial) {\n  const queue = []\n  queue.push('first')\n  queue.push('second')\n  queue.unshift('third')\n\n  trial.is(__, queue.shift())\n  trial.is(__, queue.shift())\n})\n\n/**\n * Objects\n */\n\ntest('What is the type of an object?', function (trial) {\n  trial.is(__, typeof({}))\n})\n\ntest('What is object literal notation?', function (trial) {\n  let person = {\n    name: 'Amory Blaine',\n    age: 102\n  }\n\n  trial.is(__, person.name)\n  trial.is(__, person.age)\n})\n\ntest('Dynamically adding properties to an object.', function (trial) {\n  const person = {}\n  person.__ = 'Amory Blaine'\n  person.__ = 102\n  trial.is('Amory Blaine', person.name)\n  trial.is(102, person.age)\n})\n\n/**\n * Array syntax for objects\n */\ntest('Accessing object properties with strings.', function (trial) {\n  const person = { name: 'Amory Blaine', age: 102 }\n\n  trial.is(person['__'], 'Amory Blaine')\n  trial.is(person['__'], 102)\n})"]}